name: ForgeFlow Orchestration

on:
  issues:
    types: [opened, labeled, closed]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      epic_id:
        description: 'Epic ID to execute'
        required: true
      pattern:
        description: 'Execution pattern'
        required: false
        default: 'auto'

jobs:
  # Trigger on Epic Creation
  epic-orchestration:
    name: Epic Orchestration
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issues' && 
      github.event.action == 'labeled' && 
      contains(github.event.issue.labels.*.name, 'epic')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      
      - name: Install ForgeFlow
        run: |
          npm ci
          npm run build
      
      - name: Start Parallel Execution
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
        run: |
          node dist/index.js start-parallel issue-${{ github.event.issue.number }}
      
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üöÄ ForgeFlow v2 Parallel Execution Started!
              
              Epic: #${context.issue.number}
              Pattern: Auto-detected based on labels
              
              Monitor progress at: [Dashboard](https://forgeflow.dev/executions)
              `
            });

  # Agent Task Execution
  agent-execution:
    name: Agent Task Execution
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issues' && 
      github.event.action == 'labeled' && (
        contains(github.event.issue.labels.*.name, 'strategic-planner') ||
        contains(github.event.issue.labels.*.name, 'system-architect') ||
        contains(github.event.issue.labels.*.name, 'code-implementer') ||
        contains(github.event.issue.labels.*.name, 'test-coverage-validator') ||
        contains(github.event.issue.labels.*.name, 'security-auditor') ||
        contains(github.event.issue.labels.*.name, 'performance-optimizer') ||
        contains(github.event.issue.labels.*.name, 'ui-ux-optimizer') ||
        contains(github.event.issue.labels.*.name, 'database-architect') ||
        contains(github.event.issue.labels.*.name, 'deployment-automation') ||
        contains(github.event.issue.labels.*.name, 'code-quality-reviewer') ||
        contains(github.event.issue.labels.*.name, 'antihallucination-validator')
      )
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Detect Agent Type
        id: agent
        run: |
          LABELS="${{ join(github.event.issue.labels.*.name, ',') }}"
          if [[ $LABELS == *"strategic-planner"* ]]; then
            echo "type=strategic-planner" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"system-architect"* ]]; then
            echo "type=system-architect" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"code-implementer"* ]]; then
            echo "type=code-implementer" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"test-coverage-validator"* ]]; then
            echo "type=test-coverage-validator" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"security-auditor"* ]]; then
            echo "type=security-auditor" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"performance-optimizer"* ]]; then
            echo "type=performance-optimizer" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"ui-ux-optimizer"* ]]; then
            echo "type=ui-ux-optimizer" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"database-architect"* ]]; then
            echo "type=database-architect" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"deployment-automation"* ]]; then
            echo "type=deployment-automation" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"code-quality-reviewer"* ]]; then
            echo "type=code-quality-reviewer" >> $GITHUB_OUTPUT
          elif [[ $LABELS == *"antihallucination-validator"* ]]; then
            echo "type=antihallucination-validator" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Worktree
        run: |
          BRANCH_NAME="forgeflow/issue-${{ github.event.issue.number }}"
          git worktree add -b $BRANCH_NAME .worktrees/$BRANCH_NAME origin/main
      
      - name: Execute Agent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AGENT_TYPE: ${{ steps.agent.outputs.type }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          cd .worktrees/forgeflow/issue-${{ github.event.issue.number }}
          npm ci
          npm run build
          node dist/agents/execute.js --type $AGENT_TYPE --issue $ISSUE_NUMBER
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: forgeflow/issue-${{ github.event.issue.number }}
          title: "[ForgeFlow] ${{ github.event.issue.title }}"
          body: |
            ## ForgeFlow Agent Execution
            
            **Issue:** #${{ github.event.issue.number }}
            **Agent:** ${{ steps.agent.outputs.type }}
            
            ### Changes
            This PR was automatically generated by ForgeFlow v2 agent execution.
            
            ### Quality Gates
            - [ ] TypeScript: Zero errors
            - [ ] ESLint: Zero warnings
            - [ ] Tests: >95% coverage
            - [ ] Security: No vulnerabilities
            
            Closes #${{ github.event.issue.number }}

  # Command Processing
  command-processor:
    name: Process ForgeFlow Commands
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.action == 'created' && 
      startsWith(github.event.comment.body, '@forgeflow')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Parse Command
        id: command
        run: |
          COMMAND="${{ github.event.comment.body }}"
          if [[ $COMMAND == "@forgeflow status" ]]; then
            echo "action=status" >> $GITHUB_OUTPUT
          elif [[ $COMMAND == "@forgeflow validate" ]]; then
            echo "action=validate" >> $GITHUB_OUTPUT
          elif [[ $COMMAND == "@forgeflow emergency"* ]]; then
            echo "action=emergency" >> $GITHUB_OUTPUT
          elif [[ $COMMAND == "@forgeflow stop"* ]]; then
            echo "action=stop" >> $GITHUB_OUTPUT
          fi
      
      - name: Execute Command
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTION: ${{ steps.command.outputs.action }}
        run: |
          npm ci
          npm run build
          
          case $ACTION in
            status)
              node dist/index.js status
              ;;
            validate)
              node dist/index.js validate
              ;;
            emergency)
              node dist/index.js ! issue-${{ github.event.issue.number }}
              ;;
            stop)
              # Extract execution ID from comment
              EXEC_ID=$(echo "${{ github.event.comment.body }}" | grep -oP 'stop \K[a-z0-9-]+')
              node dist/index.js stop $EXEC_ID
              ;;
          esac
      
      - name: Reply to Comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚úÖ Command executed: \`${{ github.event.comment.body }}\``
            });

  # Quality Gate Enforcement
  quality-gate-check:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Quality Gates
        id: quality
        run: |
          # TypeScript check
          npm run typecheck || echo "typescript=failed" >> $GITHUB_OUTPUT
          
          # ESLint check
          npm run lint || echo "eslint=failed" >> $GITHUB_OUTPUT
          
          # Test coverage
          npm run test:coverage
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "coverage=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Comment PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const typescript = '${{ steps.quality.outputs.typescript }}' !== 'failed';
            const eslint = '${{ steps.quality.outputs.eslint }}' !== 'failed';
            const coverage = '${{ steps.quality.outputs.coverage }}' !== 'failed';
            
            const status = typescript && eslint && coverage ? '‚úÖ' : '‚ùå';
            const message = `## ${status} ForgeFlow Quality Gates
            
            | Check | Status |
            |-------|--------|
            | TypeScript | ${typescript ? '‚úÖ Passed' : '‚ùå Failed'} |
            | ESLint | ${eslint ? '‚úÖ Passed' : '‚ùå Failed'} |
            | Test Coverage (>95%) | ${coverage ? '‚úÖ Passed' : '‚ùå Failed'} |
            
            ${!typescript || !eslint || !coverage ? '**This PR cannot be merged until all quality gates pass.**' : '**All quality gates passed! Ready to merge.**'}
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

  # Protocol Validation
  protocol-validation:
    name: Protocol Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check NLNH Protocol
        run: |
          echo "Checking No Lies, No Hallucination protocol..."
          # Validate no console.log statements
          ! grep -r "console.log" --include="*.ts" --include="*.tsx" src/
      
      - name: Check AntiHall Protocol
        run: |
          echo "Checking Anti-Hallucination protocol..."
          npm ci
          npm run build
          npm run antihall:check
      
      - name: Check RYR Protocol
        run: |
          echo "Checking Remember Your Rules protocol..."
          # Verify RULES.md exists and is followed
          test -f RULES.md || exit 1